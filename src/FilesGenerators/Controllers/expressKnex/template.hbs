const { page } = require('../utils/page')
const { ErrorResponse, CreatedResponse, NoContentResponse, SuccessResponse, Paginate } = require('../responses/index.responses')
const {{entity.name}}Service = require('../services/{{entity.importName}}.service')

class {{entity.name}}Controller {
  {{#if methods.read}}
  async paginate({ tenant, query }, res) {
    try {
      const requestedPage = page(query)
      const {{entity.nameFirstLetterLowerCase}}Service = new {{entity.Name}}Service(tenant)
      const { count, {{entity.paginateObjectName}} } = await {{entity.nameFirstLetterLowerCase}}Service.paginate(requestedPage)

      return Paginate(res, count, requestedPage, {{entity.paginateObjectName}})
    } catch (error) {
      return ErrorResponse(error, res)
    }
  }
  {{/if}}
  {{#if methods.read}}
  async findOne({ tenant, params: { codigo } }, res) {
    try {
      const {{entity.nameFirstLetterLowerCase}}Service = new {{entity.Name}}Service(tenant)
      const {{entity.nameFirstLetterLowerCase}} = await {{entity.nameFirstLetterLowerCase}}Service.findOne(codigo)

      return SuccessResponse(res, {{entity.nameFirstLetterLowerCase}})
    } catch (error) {
      return ErrorResponse(error, res)
    }
  }
  {{/if}}
  {{#if methods.create}}
  async create({ tenant, body }, res) {
    try {
      const {{entity.nameFirstLetterLowerCase}}Service = new {{entity.Name}}Service(tenant)
      const {{entity.nameFirstLetterLowerCase}} = await {{entity.nameFirstLetterLowerCase}}Service.create(body)

      return CreatedResponse(res, {{entity.nameFirstLetterLowerCase}})
    } catch (error) {
      return ErrorResponse(error, res)
    }
  }
  {{/if}}
  {{#if methods.update}}
  async update({ tenant, body, params: { codigo } }, res) {
    try {
      const {{entity.nameFirstLetterLowerCase}}Service = new {{entity.Name}}Service(tenant)
      const {{entity.nameFirstLetterLowerCase}} = await {{entity.nameFirstLetterLowerCase}}Service.update(codigo, body)

      return SuccessResponse(res, {{entity.nameFirstLetterLowerCase}})
    } catch (error) {
      return ErrorResponse(error, res)
    }
  }
  {{/if}}
  {{#if methods.delete}}
  async destroy({ tenant, params: { codigo } }, res) {
    try {
      const {{entity.nameFirstLetterLowerCase}}Service = new {{entity.Name}}Service(tenant)
      await {{entity.nameFirstLetterLowerCase}}Service.destroy(codigo)

      return NoContentResponse(res)
    } catch (error) {
      return ErrorResponse(error, res)
    }
  },
  {{/if}}
  {{#if methods.contato}}
  async paginateContatos({ tenant, query, params: { codigo } }, res) {
    try {
      const requestedPage = page(query)
      const contatoService = new ContatoService(tenant)

      const { count, contatos } = await contatoService.paginate(requestedPage, codigo, constants.PESSOA.CONTATO.{{entity.nameUpperCase}})

      return Paginate(res, count, requestedPage, contatos)
    } catch (error) {
      return ErrorResponse(error, res)
    }
  }
  async createContato({ tenant, body, params: { codigo } }, res) {
    try {
      const contatoService = new ContatoService(tenant)
      const contato = await contatoService.create(codigo, constants.PESSOA.CONTATO.{{entity.nameUpperCase}}, body)

      return CreatedResponse(res, contato)
    } catch (error) {
      return ErrorResponse(error, res)
    }
  }
  async updateContato({ tenant, body, params: { codigo, email } }, res) {
    try {
      const contatoService = new ContatoService(tenant)
      const contato = await contatoService.update(codigo, constants.PESSOA.CONTATO.{{entity.nameUpperCase}}, email, body)

      return SuccessResponse(res, contato)
    } catch (error) {
      return ErrorResponse(error, res)
    }
  }
  async destroyContato({ tenant, params: { codigo, email } }, res) {
    try {
      const contatoService = new ContatoService(tenant)
      await contatoService.destroy(codigo, constants.PESSOA.CONTATO.{{entity.nameUpperCase}}, email)

      return NoContentResponse(res)
    } catch (error) {
      return ErrorResponse(error, res)
    }
  }
  {{/if}}
};

module.exports = {{entity.name}}Controller